#!/usr/bin/env node

"use strict";

/*
 * apidoc
 * http://apidocjs.com
 *
 * Copyright (c) 2013-2016 inveris OHG
 * Author Peter Rottmann <rottmann@inveris.de>
 * Licensed under the MIT license.
 */

const path = require("path");
const yargs = require("yargs/yargs");
const { hideBin } = require("yargs/helpers");
const apidoc = require("../lib/index");

const argv = yargs(hideBin(process.argv))
    .option("file-filters", {
        alias: "f",
        default:
            ".*\\.(clj|cls|coffee|cpp|cs|dart|erl|exs?|go|groovy|ino?|java|js|jsx|kt|litcoffee|lua|p|php?|pl|pm|py|rb|scala|ts|vue)$",
        array: true,
        description: "RegEx-Filter to select files that should be parsed (multiple -f can be used).",
    })
    .option("exclude-filters", {
        alias: "e",
        default: "",
        array: true,
        description: "RegEx-Filter to select files/dirs that should not be parsed (multiple -e can be used).",
    })
    .option("input", {
        alias: "i",
        default: "./",
        array: true,
        description: "Input/source dirname.",
    })
    .option("output", {
        alias: "o",
        default: "./doc/",
        description: "Output dirname.",
    })
    .option("template", {
        alias: "t",
        default: path.join(__dirname, "../template/"),
        description: "Use template for output files.",
    })
    .option("config", {
        alias: "c",
        default: "./",
        description: "Path to directory containing config file (apidoc.json).",
    })
    .option("private", {
        alias: "p",
        default: false,
        type: "boolean",
        description: "Include private APIs in output.",
    })
    .option("verbose", {
        alias: "v",
        default: false,
        type: "boolean",
        description: "Verbose debug output.",
    })
    .option("help", {
        alias: "h",
        type: "boolean",
        description: "Show this help information.",
    })
    .option("debug", {
        default: false,
        type: "boolean",
        description: "Show debug messages.",
    })
    .option("color", {
        default: true,
        type: "boolean",
        description: "Turn off log color.",
    })
    .option("parse", {
        default: false,
        type: "boolean",
        description: "Parse only the files and return the data, no file creation.",
    })
    .option("parse-filters", {
        array: true,
        description: "Optional user-defined filters. Format name=filename.",
    })
    .option("parse-languages", {
        array: true,
        description: "Optional user-defined languages. Format name=filename.",
    })
    .option("parse-parsers", {
        array: true,
        description: "Optional user-defined parsers. Format name=filename.",
    })
    .option("parse-workers", {
        array: true,
        description: "Optional user-defined workers. Format name=filename.",
    })
    .option("silent", {
        default: false,
        type: "boolean",
        description: "Turn all output off.",
    })
    .option("simulate", {
        default: false,
        type: "boolean",
        description: "Execute but not write any file.",
    })
    .option("markdown", {
        default: true,
        type: "boolean",
        description: "Turn off default markdown parser or set a file to a custom parser.",
    })
    .option("line-ending", {
        description: "Turn off autodetect line-ending. Allowed values: LF, CR, CRLF.",
    })
    .option("encoding", {
        default: "utf8",
        description: "Set the encoding of the source code. [utf8].",
    })
    .help().argv;

/**
 * Transform parameters to object
 *
 * @param {String|String[]} filters
 * @returns {Object}
 */
function transformToObject(filters) {
    if (!filters) return;

    if (typeof filters === "string") filters = [filters];

    const result = {};
    filters.forEach(function (filter) {
        const splits = filter.split("=");
        if (splits.length === 2) {
            result[splits[0]] = path.resolve(splits[1], "");
        }
    });
    return result;
}

const options = {
    excludeFilters: argv["exclude-filters"],
    includeFilters: argv["file-filters"],
    src: argv.input,
    dest: argv.output,
    template: argv.template,
    config: argv.config,
    apiprivate: argv.private,
    verbose: argv.verbose,
    debug: argv.debug,
    parse: argv.parse,
    colorize: argv.color,
    filters: transformToObject(argv["parse-filters"]),
    languages: transformToObject(argv["parse-languages"]),
    parsers: transformToObject(argv["parse-parsers"]),
    workers: transformToObject(argv["parse-workers"]),
    silent: argv.silent,
    simulate: argv.simulate,
    markdown: argv.markdown,
    lineEnding: argv["line-ending"],
    encoding: argv.encoding,
};

if (apidoc.createDoc(options) === false) {
    process.exit(1);
}
